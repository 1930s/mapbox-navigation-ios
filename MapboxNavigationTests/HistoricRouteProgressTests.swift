import XCTest
import FBSnapshotTestCase
import Turf
import TestHelper
import MapboxDirections
@testable import MapboxCoreNavigation
@testable import MapboxNavigation

struct AssociatedLocation {
    let location: CLLocation
    let text: String
}

class HistoricRouteProgressTests: FBSnapshotTestCase {
    
    override func setUp() {
        super.setUp()
        recordMode = false
    }
    
    func testHistoricRouteProgressDisabled() {
        runTest(cumulatively: false)
    }
    
    func testHistoricRouteProgressEnabled() {
        runTest(cumulatively: true)
    }
    
    func runTest(cumulatively: Bool) {
        // Short initial route (Blue line)
        let route = Fixture.route(from: "historic-route-progress")
        // New route from where the trace missed a turn (Green line)
        let reroute = Fixture.route(from: "historic-route-progress-reroute")
        // Trace of a detour from the initial origin to the destination (generated by `Fixture.generateTrace(for:)`) (Red dots)
        let rawTrace = Fixture.locations(from: "historic-route-progress.trace")
        
        var trace = (rawTrace as [CLLocation?]).enumerated().compactMap { return $0.offset % 2 == 0 ? nil : $0.element }
            .enumerated().compactMap { return $0.offset % 2 == 0 ? nil : $0.element }
        trace.append(rawTrace.last!)
        
        trace = trace.enumerated().map {
            CLLocation(coordinate: $0.element.coordinate, altitude: -1, horizontalAccuracy: 10, verticalAccuracy: 10, course: -1, speed: 10, timestamp: Date() + $0.offset)
        }
        
        print(trace)
        
        let directions = DirectionsSpy(accessToken: "foo")
        
        let locationManager = ReplayLocationManager(locations: trace)
        let service = MapboxNavigationService(route: route,
                                              directions: directions,
                                              locationSource: locationManager,
                                              eventsManagerType: NavigationEventsManagerSpy.self,
                                              simulating: SimulationMode.never)
        
        let tester = HistoricProgressTester(navigationService: service, upcomingRoutes: [reroute])
        
        let view = NavigationPlotter(frame: CGRect(origin: .zero, size: CGSize(width: 1000, height: 1000)))
        view.routePlotters = [RoutePlotter(route: route, color: .route, lineWidth: 8, drawDotIndicator: false, drawTextIndicator: false),
                              RoutePlotter(route: reroute, color: .green, lineWidth: 8, drawDotIndicator: false, drawTextIndicator: false)]
        
        var associatedLocations = [AssociatedLocation]()
        
        for location in trace {
            service.router!.locationManager!(locationManager, didUpdateLocations: [location])
            
            let router = service.router! as! RouteController
            
            let distance: CLLocationDistance
            let progress: Double
            
            if cumulatively {
                distance = router.cumulativeDistanceTraveled
                progress = router.cumulativeProgressCompleted
            } else {
                distance = router.routeProgress.distanceTraveled
                progress = router.routeProgress.fractionTraveled
            }
            
            let text = "[\(Int(distance))]:[\(progress.rounded(precision: 1e3))]"
            associatedLocations.append(AssociatedLocation(location: location, text: text))
        }
        
        view.coordinatePlotters = [CoordinatePlotter(coordinates: associatedLocations.map { $0.location.coordinate },
                                                     coordinateText: associatedLocations.map { $0.text },
                                                     fontSize: 16,
                                                     color: .red,
                                                     drawIndexesAsText: false)]
        tester.navigationService.delegate = nil
        verify(view)
    }
}

class HistoricProgressTester: NavigationServiceDelegate {
    
    let navigationService: MapboxNavigationService
    var upcomingRoutes: [Route]
    
    init(navigationService: MapboxNavigationService, upcomingRoutes: [Route]) {
        self.navigationService = navigationService
        self.upcomingRoutes = upcomingRoutes
        self.navigationService.delegate = self
    }
    
    func navigationService(_ service: NavigationService, shouldRerouteFrom location: CLLocation) -> Bool {
        navigationService.route = upcomingRoutes.popLast()!
        return false
    }
}
